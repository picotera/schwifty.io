{"version":3,"sources":["webpack:///./src/services/cast-receiver-manager/cast-receiver-manager.service.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/polyfills.ts","webpack:///./src/services/message-bus/message-bus.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAwC;AACxC,IAAI,IAAI,CAAC;AAGT;IAAA;QACU,cAAS,GAAW,4BAA4B,CAAC;QAIlD,SAAI,GAAG;YACZ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;YAEtC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC;gBACvB,MAAM,CAAC,KAAK,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEnE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;YAE/D,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK;gBAC3B,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gCAAgC,CAAC,CAAC;YACrE,CAAC,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG,CAAC,KAAK;gBACrC,OAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;YAC5D,CAAC,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,CAAC,KAAK;gBAEtC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC;oBACrH,MAAM,CAAC,KAAK,EAAE,CAAC;gBACnB,CAAC;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,CAAC,KAAK;gBACzC,OAAO,CAAC,GAAG,CAAC,wCAAwC,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG;oBAC5E,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3B,CAAC,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;AAAD,CAAC;AAvCD;IAAC,wFAAU,EAAE;;8BAAA;AAuCZ,2G;;;;;;;AC1CD;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA,uEAAuE;AAEhD;AAEmD;AAC5B;AACU;AACZ;AAE5C,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,4FAAc,EAAE,CAAC;AACnB,CAAC;AAED,wHAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;ACbX;AAOzC;IAAA;QACE,UAAK,GAAG,YAAY,CAAC;IACvB,CAAC;AAAD,CAAC;AAPD;IAAC,uFAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,kCAAmC;QACnC,kCAAkC;KACnC,CAAC;;gBAAA;AAGD,2F;;;;;;;;;;;;;;;;;;;;;;;;;ACTwD;AACjB;AACI;AACF;AAEI;AAC+B;AAC6B;AAgB1G;AAAyB,CAAC;AAd1B;IAAC,sFAAQ,CAAC;QACR,YAAY,EAAE;YACZ,oEAAY;SACb;QACD,OAAO,EAAE;YACP,gFAAa;YACb,mEAAW;YACX,iEAAU;SACX;QACD,SAAS,EAAE;YACT,oGAAiB;YACjB,iIAA0B,CAAC;QAC7B,SAAS,EAAE,CAAC,oEAAY,CAAC;KAC1B,CAAC;;aAAA;AACwB,wF;;;;;;;;ACvB1B,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,+EAA+E;AAExE,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLyB;AACA;AACE;AACC;AACE;AACL;AACF;AACE;AACF;AACC;AACC;AACH;AACA;AACI;AAEA;AACF;;;;;;;;;;;;;;;;;;;;;AClBc;AACyD;AAGjG;IAKE,YAAoB,0BAAsD;QAAtD,+BAA0B,GAA1B,0BAA0B,CAA4B;QAJlE,cAAS,GAAW,mBAAmB,CAAC;QAOzC,SAAI,GAAG;YACZ,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAC;YAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;gBACxB,MAAM,CAAC,KAAK,CAAC;YAEjB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;YAEtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,wDAAwD,CAAC,CAAC;YAE3G,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IAdD,CAAC;AAeH,CAAC;AAtBD;IAAC,wFAAU,EAAE;;qBAAA;AAsBZ;;;;;;;;ACzBD,mB;;;;;;;ACAA,4BAA4B,OAAO,U","file":"main.bundle.js","sourcesContent":["import {Injectable} from '@angular/core';\nvar cast;\n\n@Injectable()\nexport class CastReceiverManagerService {\n  private serviceId: string = \"CastReceiverManagerService\";\n  manager: any;\n  cast:any;\n\n  public init = () => {\n    console.log(this.serviceId + \".init\");\n\n    if (this.manager != null)\n      return false;\n    cast.receiver.logger.setLevelValue(cast.receiver.LoggerLevel.NONE);\n\n    this.manager = cast.receiver.CastReceiverManager.getInstance();\n\n    this.manager.onReady = (event) =>  {\n      console.log('Received Ready event: ' + JSON.stringify(event.data));\n      this.manager.setApplicationState(\"Application status is ready...\");\n    };\n\n    this.manager.onSenderConnected = (event) => {\n      console.log('Received Sender Connected event: ' + event.data);\n      console.log(this.manager.getSender(event.data).userAgent);\n    };\n\n    this.manager.onSenderDisconnected = (event) => {\n\n        if (this.manager.getSenders().length == 0 && event.reason == cast.receiver.system.DisconnectReason.REQUESTED_BY_SENDER) {\n            window.close();\n        }\n    };\n\n    this.manager.onSystemVolumeChanged = (event) => {\n      console.log('Received System Volume Changed event: ' + event.data['level'] + ' ' +\n          event.data['muted']);\n    };\n\n    return true;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/cast-receiver-manager/cast-receiver-manager.service.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 339;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 339\n// module chunks = 0","/// <reference path=\"../node_modules/@types/chrome/chrome-cast.d.ts\" />\n\nimport './polyfills.ts';\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app works!';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport {MessageBusService} from \"../services/message-bus/message-bus.service\";\nimport {CastReceiverManagerService} from \"../services/cast-receiver-manager/cast-receiver-manager.service\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [\n    MessageBusService,\n    CastReceiverManagerService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","// This file includes polyfills needed by Angular and is loaded before\n// the app. You can add your own extra polyfills to this file.\nimport 'core-js/es6/symbol';\nimport 'core-js/es6/object';\nimport 'core-js/es6/function';\nimport 'core-js/es6/parse-int';\nimport 'core-js/es6/parse-float';\nimport 'core-js/es6/number';\nimport 'core-js/es6/math';\nimport 'core-js/es6/string';\nimport 'core-js/es6/date';\nimport 'core-js/es6/array';\nimport 'core-js/es6/regexp';\nimport 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport 'core-js/es6/reflect';\n\nimport 'core-js/es7/reflect';\nimport 'zone.js/dist/zone';\n\n\n\n// WEBPACK FOOTER //\n// ./src/polyfills.ts","import {Injectable} from '@angular/core';\nimport {CastReceiverManagerService} from '../cast-receiver-manager/cast-receiver-manager.service';\n\n@Injectable()\nexport class MessageBusService {\n  private serviceId: string = \"MessageBusService\";\n  messageBus: any;\n  manager: any;\n\n  constructor(private castReceiverManagerService: CastReceiverManagerService) {\n  }\n\n  public init = () => {\n    this.castReceiverManagerService.init();\n\n    if (this.messageBus != null)\n        return false;\n\n    console.log(this.serviceId + \".init\");\n\n    this.manager = this.castReceiverManagerService.manager;\n    this.messageBus = this.manager.getCastMessageBus('urn:x-cast:com.angular2.chromecast.receiver.starterkit');\n\n    return true;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/message-bus/message-bus.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 606\n// module chunks = 0","module.exports = \"<h1>\\n  {{title}}\\n</h1>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 607\n// module chunks = 0"],"sourceRoot":""}